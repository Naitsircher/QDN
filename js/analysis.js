$(document).ready(function () {//*âœ…*/
    //ALERT CODE ON PAGE LOAD
    Swal.fire({
        title: 'PLEASE READ ME!',
        icon: 'info',
        html:'By default, the latest QDN number will be the value of the "QDN #" input field. Kindly <span style="color: red;">"KEY-IN YOUR QDN NUMBER"</span> as what is stated in the system autogenerated email',
        backdrop: true,
        allowOutsideClick: () => {
            const popup = Swal.getPopup()
            popup.classList.remove('swal2-show')
            setTimeout(() => {
                popup.classList.add('animate__animated', 'animate__headShake')
            })
            setTimeout(() => {
                popup.classList.remove('animate__animated', 'animate__headShake')
            }, 500)
            return false
        }
    });/*ALERT END'S HERE*/   
    $(".invalid ").hide();
    var analysisSectionTemplate = $('#analysisSection').html();
    var qdnNumberForAnalysis = $("#qdnNumber").val();
    //=====================================================>
    // ALL ABOUT FUNCTIONS  ðŸ”½
    //=====================================================>
    // IMPLEMENTING PROMISE 

    //FUNCTION RESPONSIBLE FOR HANDLING EACH REASSIGNMENT 
    let reassignments = (data, checkID) =>{
        if (data){
            var dataLen = data.length;
            var count = 0;
            // LOOP TO CHECK IF THERE IS A MATCHED ID BETWEEN ANALYSIS AND REASSIGNMENT TABLE
            for (var i = 0; i < dataLen; i++) {
                var fetchedData = data[i]['analysis_tbl_id'];
                // FORMAT OF CUSTOM ELEMENT TO APPEND IF THERE IS A REASSIGNMENT
                const colDiv = document.createElement("div");
                const row1Div = document.createElement("div");
                const row2Div = document.createElement("div");
                const row3Div = document.createElement("div");
                const row4Div = document.createElement("div");
                const row1Lbl = document.createElement("label");
                const row2Lbl = document.createElement("label");

                colDiv.className = "fromDbData row";
                colDiv.id = count;
                row1Div.className = "col-sm-2";
                row2Div.className = "col";
                row3Div.className = "col-sm-2";
                row4Div.className = "col";

                row1Lbl.className = "telfordRed col-form-label";
                row1Lbl.id = "labelSpanName" + count;
                row1Lbl.innerText = "Reassigned To: "

                row2Lbl.className = "telfordRed col-form-label";
                row2Lbl.id = "labelSpanTeam" + count;
                row2Lbl.innerText = "Team: ";
                // END OF FORMAT 

                // CHECKING EACH DATA IF IT IS MATCHED ID 
                // BETWEEN ANALYSIS AND REASSIGNMENT TABLE
                if ((fetchedData == checkID) && (count == 0)) {

                    var reAssEmpName = data[i]["reAssignedName"];
                    var reAssignedTeam = data[i]["reAssignedTeam"];

                    const span = document.createElement("span");
                    const span2 = document.createElement("span");


                    span.className = "fromdbResutl";
                    span.id = "reAssignToNameSpan" + count;
                    span.innerText = " " + reAssEmpName;

                    span2.className = "fromdbResutl";
                    span2.id = "reAssignToTeamSpan" + count;
                    span2.innerText = " " + reAssignedTeam;


                    $("#issuedToDiv").after(colDiv);
                    $(colDiv).append(row1Div);
                    $(colDiv).append(row2Div);
                    $(colDiv).append(row3Div);
                    $(colDiv).append(row4Div);
                    //Reass Label
                    $(row1Div).append(row1Lbl);
                    //Team Label
                    $(row3Div).append(row2Lbl);
                    // Reass Span
                    $(row2Div).append(span);
                    // Team Span
                    $(row4Div).append(span2);

                    count++;
                }
                else if ((fetchedData == checkID) && (count >= 1)) {
                    var reAssEmpName = data[i]["reAssignedName"];
                    var reAssignedTeam = data[i]["reAssignedTeam"];
                    var newId = document.getElementById(count - 1);

                    const span = document.createElement("span");
                    const span2 = document.createElement("span");

                    span.className = "fromdbResutl";
                    span.id = "reAssignToNameSpan" + count;
                    span.innerText = " " + reAssEmpName;

                    span2.className = "fromdbResutl";
                    span2.id = "reAssignToTeamSpan" + count;
                    span2.innerText = " " + reAssignedTeam;

                    // console.log("MORE REASS", reAssEmpName, reAssignedTeam, newId)

                    $(newId).after(colDiv);
                    $(colDiv).append(row1Div);
                    $(colDiv).append(row2Div);
                    $(colDiv).append(row3Div);
                    $(colDiv).append(row4Div);
                    //Reass Label
                    $(row1Div).append(row1Lbl);
                    //Team Label
                    $(row3Div).append(row2Lbl);
                    // Reass Span
                    $(row2Div).append(span);
                    // Team Span
                    $(row4Div).append(span2);

                    count++;
                };
            };
        };
    }; 
    // AJAX REQUEST FOR QND REASSIGNMENT DATA (request 9)
    let exeFuncReass = checkID => {
        $.ajax({
            type: 'POST',
            url: "./php/getDetails.php",
            data: { matchedReAss: checkID, request: 9 },
            cache: false,
            dataType: "json",
            success:(data) => { /*FUNCTION TO PROCESS REASSIGNMENT DATA*/ 
                reassignments(data, checkID);
            },
        });
    };/*Function Reassignment Ends here!*/
    // FUNCTION TO PROCESS CONTAINMENT DATA
    let containmentData = (data, checkID) => {
        //**Check if parm data is not null
        // if not attach the item(s) to the DOM or html page
        if ( data ){
            var conDataLen = data.length;
            var containmentCount = 0;
            // LOOP TO HANDLE THE Containments Result
            for (var i = 0; i < conDataLen; i++) {
                var actions = data[i]['actions'];
                var responsible = data[i]['responsible'];
                var when = data[i]['when'];
                var status = data[i]['status'];
                var fetchedId = data[i]['analysis_tbl_id'];

                const tblRow = document.createElement('tr');

                const tblRowCol = document.createElement('td');
                const tblRowCol1 = document.createElement('td');
                const tblRowCol2 = document.createElement('td');
                const tblRowCol3 = document.createElement('td');


                tblRow.id = "contain" + containmentCount;

                tblRowCol.id = "containAct" + containmentCount;
                tblRowCol.contentEditable = true;
                tblRowCol.className = "pre-wrap";
                tblRowCol.innerText = actions;

                tblRowCol1.id = "containResp" + containmentCount;
                tblRowCol1.contentEditable = true;
                tblRowCol1.className = "pre-wrap";
                tblRowCol1.innerText = responsible;


                tblRowCol2.id = "containWhen" + containmentCount;
                tblRowCol2.contentEditable = true;
                tblRowCol2.className = "pre-wrap";
                tblRowCol2.innerText = when;

                tblRowCol3.id = "containStatus" + containmentCount;
                tblRowCol3.contentEditable = true;
                tblRowCol3.className = "pre-wrap";
                tblRowCol3.innerText = status;

                // INSERTING TABLE ROW ABOVE THE CLASS "tdbodyContainment"
                if ((fetchedId == checkID) && (containmentCount == 0)) {

                    $(".tbodyContainment").prepend($(tblRow));
                    $(tblRow).append(tblRowCol);

                    $(tblRow).append(tblRowCol1);
                    $(tblRow).append(tblRowCol2);
                    $(tblRow).append(tblRowCol3);

                    containmentCount++;
                }
                // INSERTING TABLE ROW BELOW THE THE NEWLY INSERTED ROW
                else if ((fetchedId == checkID) && (containmentCount > 0)) {
                    const tblRowNew = document.createElement('tr');
                    tblRowNew.id = "contain" + containmentCount;
                    var newtr = document.getElementById("contain" + (containmentCount - 1));
                    // console.log(newtr);

                    $(newtr).after(tblRow);
                    $(tblRow).append(tblRowCol);
                    $(tblRow).append(tblRowCol1);
                    $(tblRow).append(tblRowCol2);
                    $(tblRow).append(tblRowCol3);

                    containmentCount++;
                };
            };
            // </ END OF LOOP
        };
        // </End of checking
    };
    // ANOTHER REQUEST FOR QDN DETAILS (request 10)
    // IM SO TIRED AT THIS TIME SO MANY REQUEST :(
    // THIS WILL CHECK IF THERE IS A CONTAINMENT ATTACHED 
    let exeFuncContain = checkID => {
        $.ajax({
            type: 'POST',
            url: "./php/getDetails.php",
            data: { matchedContainment: checkID, request: 10 },
            cache: false,
            dataType: "json",
            success: (data) => {
                //EXCECUTION OF FUCTION 
                containmentData(data, checkID);
            },
        });
    };/*FUNCTION FOR CONTAINMENT ENDS HERE!*/
    //FUNCTION TO PROCESS CORRECTION DATA
    let correctionData = (data, checkID) => {
        // Check if data is not null
        if ( data ) {
            var correctionDataLen = data.length;
            var correctionCount = 0;
            // LOOP TO HANDLE THE Containments Result
            for (var i = 0; i < correctionDataLen; i++) {
                var actions = data[i]['actions'];
                var responsible = data[i]['responsible'];
                var when = data[i]['when'];
                var status = data[i]['status'];
                var fetchedId = data[i]['analysis_tbl_id'];

                const tblRow = document.createElement('tr');

                const tblRowCol = document.createElement('td');
                const tblRowCol1 = document.createElement('td');
                const tblRowCol2 = document.createElement('td');
                const tblRowCol3 = document.createElement('td');


                tblRow.id = "correction" + correctionCount;

                tblRowCol.id = "correctionAct" + correctionCount;
                tblRowCol.contentEditable = true;
                tblRowCol.className = "pre-wrap";
                tblRowCol.innerText = actions;

                tblRowCol1.id = "correctionResp" + correctionCount;
                tblRowCol1.contentEditable = true;
                tblRowCol1.className = "pre-wrap";
                tblRowCol1.innerText = responsible;


                tblRowCol2.id = "correctionWhen" + correctionCount;
                tblRowCol2.contentEditable = true;
                tblRowCol2.className = "pre-wrap";
                tblRowCol2.innerText = when;

                tblRowCol3.id = "correctionStatus" + correctionCount;
                tblRowCol3.contentEditable = true;
                tblRowCol3.className = "pre-wrap";
                tblRowCol3.innerText = status;

                // INSERTING TABLE ROW ABOVE THE CLASS "tdboyCorrection"
                if ((fetchedId == checkID) && (correctionCount == 0)) {

                    $(".tbodyCorrection").prepend($(tblRow));
                    $(tblRow).append(tblRowCol);

                    $(tblRow).append(tblRowCol1);
                    $(tblRow).append(tblRowCol2);
                    $(tblRow).append(tblRowCol3);

                    correctionCount++;
                }
                // INSERTING TABLE ROW BELOW THE THE NEWLY INSERTED ROW
                else if ((fetchedId == checkID) && (correctionCount > 0)) {

                    const tblRowNew = document.createElement('tr');
                    tblRowNew.id = "correction" + correctionCount;
                    var newtr = document.getElementById("correction" + (correctionCount - 1));
                    // console.log(newtr);

                    $(newtr).after(tblRow);
                    $(tblRow).append(tblRowCol);
                    $(tblRow).append(tblRowCol1);
                    $(tblRow).append(tblRowCol2);
                    $(tblRow).append(tblRowCol3);

                    correctionCount++;
                };
            };
            // </ END OF LOOP
        };/*</End of checking if data is not null*/ 
    };
    // CHECK IF THERE IS A CORRECTION ATTACHED 
    // ANOTHER REQUEST FOR CORRECTION DETAILS (request 11)
    let exeFuncCorrection = checkID => {
        $.ajax({
            type: 'POST',
            url: "./php/getDetails.php",
            data: { matchedCorrection: checkID, request: 11 },
            cache: false,
            dataType: "json",
            success: (data) => { /*FUNCTION TO PROCESS CORRECTION DATA*/
                correctionData(data, checkID);
            },
        });    
    };/*FUNCTION FOR CORRECTION DATA ENDS HERE!*/
    //FUNCTION TO PROCESS CORRECTIVE ACTION ITEMS 
    let correctiveData = (data, checkID) => {
        // CHECK IF DATA IS NULL
        if ( data ) {
            var correctiveDataLen = data.length;
            var correctiveCount = 0;

            // LOOP TO HANDLE THE Containments Result
            for (var i = 0; i < correctiveDataLen; i++) {
                var actions = data[i]['actions'];
                var responsible = data[i]['responsible'];
                var when = data[i]['when'];
                var status = data[i]['status'];
                var fetchedId = data[i]['analysis_tbl_id'];

                const tblRow = document.createElement('tr');
                const tblRowCol = document.createElement('td');
                const tblRowCol1 = document.createElement('td');
                const tblRowCol2 = document.createElement('td');
                const tblRowCol3 = document.createElement('td');


                tblRow.id = "corrective" + correctiveCount;

                tblRowCol.id = "correctiveAct" + correctiveCount;
                tblRowCol.contentEditable = true;
                tblRowCol.className = "pre-wrap";
                tblRowCol.innerText = actions;

                tblRowCol1.id = "correctiveResp" + correctiveCount;
                tblRowCol1.contentEditable = true;
                tblRowCol1.className = "pre-wrap";
                tblRowCol1.innerText = responsible;


                tblRowCol2.id = "correctiveWhen" + correctiveCount;
                tblRowCol2.contentEditable = true;
                tblRowCol2.className = "pre-wrap";
                tblRowCol2.innerText = when;

                tblRowCol3.id = "correctiveStatus" + correctiveCount;
                tblRowCol3.contentEditable = true;
                tblRowCol3.className = "pre-wrap";
                tblRowCol3.innerText = status;

                // INSERTING TABLE ROW ABOVE THE CLASS "tdboycorrective"
                if ((fetchedId == checkID) && (correctiveCount == 0)) {

                    $(".tbodyCorrective").prepend($(tblRow));
                    $(tblRow).append(tblRowCol);
                    $(tblRow).append(tblRowCol1);
                    $(tblRow).append(tblRowCol2);
                    $(tblRow).append(tblRowCol3);
                    correctiveCount++;
                }
                // INSERTING TABLE ROW BELOW THE THE NEWLY INSERTED ROW
                else if ((fetchedId == checkID) && (correctiveCount > 0)) {

                    const tblRowNew = document.createElement('tr');
                    tblRowNew.id = "corrective" + correctiveCount;
                    var newtr = document.getElementById("corrective" + (correctiveCount - 1));
                    // console.log(newtr);

                    $(newtr).after(tblRow);
                    $(tblRow).append(tblRowCol);
                    $(tblRow).append(tblRowCol1);
                    $(tblRow).append(tblRowCol2);
                    $(tblRow).append(tblRowCol3);

                    correctiveCount++;
                };
            };
            //     // </ END OF LOOP
        };// </END OF CHECKING IF DATA IS NULL   
    };
    // CHECK IF THERE IS A CORRECTIVE ATTACHED 
    // REQUEST FOR CORRECTIVE DETAILS (request 12)
    let exeFuncCorrective = checkID => {
        $.ajax({
            type: 'POST',
            url: "./php/getDetails.php",
            data: { matchedCorrective: checkID, request: 12 },
            cache: false,
            dataType: "json",
            success: (data) => {
                correctiveData (data, checkID);
            },
        });
    };/*FUNCTION FOR CORRECTIVE ACTION ITEMS ENDS HERE!*/
    // FUNCTION TO CHECK WHAT RADIO BUTTON SHOULD BE 
    // SELECTED BASE ON THE DATABASE
    let checkIfnotNUll2Db = (arr, arrLen, toCheck) => {
        for (var i = 0; i < arrLen; i++){
            var fromDbVal = arr[i].val();
            if (toCheck == fromDbVal){
                arr[i].prop("checked", true);
            };
        };
    };/*FUNCTION FOR RADIO BUTTON CHECKING ENDS HERE!*/
    //**FUNCTION TO SET THE VALUE TO BLANK WHEN NO QDN NUMBER
    // MATCHED ON SEARCH EVENT
    let makeItBlank = () => {
        let toBeBlank = [$("#ibName"),$("#ibTeam"),$("#itName"),$("#itTeam"),$("#customer"),$("#machine"),$("#pkgType"),$("#partName"),$("#station"),$("#lotId"),$("#teamResp"),$("#dateTime"),$("#classification"),$("#defects"),$("#failureMode")];
        for (var i = 0; i < toBeBlank.length; i++){
            toBeBlank[i].html("");
        };
    };
    //**FUNCTION RESPONSIBLE FOR RADIO BUTTON VALUES
    let checkTheRadio = (des, COD, CODDes, failure_mode) =>{
        // PARSE THE DATA FROM DB TO HTML PAGE
        if (des || COD || CODDes || failure_mode) {
            //**CODE FOR DISPOSITION 
            var failureMode = [$("#man"), $("#MaChine"), $("#material"), $("#method"), $("#environment")];
            var failureModeLen = failureMode.length;
            checkIfnotNUll2Db(failureMode, failureModeLen, failure_mode);
            /*Failure mode code ends here!*/
            //**CODE FOR DISPOSITION 
            var dispo = [$("#useAsIs"), $("#mcmr"), $("#rework"), $("#splitLot"), $("#shutdown"), $("#shipBack")];
            var dispoLen = dispo.length;
            checkIfnotNUll2Db(dispo, dispoLen, des);
            /*Disposition code Ends here!*/

            //** CODE FOR CAUSE OF DEFECTS 
            var causeOfDefects = [$("#production"),$("#process"),$("#Maintenance"),$("#Facilities"),$("#QA"),$("#Others")];
            var causeOfDefectsLen = causeOfDefects.length;
            checkIfnotNUll2Db(causeOfDefects, causeOfDefectsLen, COD);
            /*Cause of defects code ends here!*/
            if (CODDes) {
                $("#CODstatement").val(CODDes);
            };
        };
    };
    //=====================================================>
    // ALL ABOUT FUNCTIONS END'S HERE  ðŸ”¼
    //=====================================================>
    //=====================================================>
    //START OF REASSIGNMENT AUTOCOMPLETE
    //=====================================================>
    $(document).on("keyup", "#reAssignTo", function () {
        var userInput = $(this).val();
        if (userInput != null) {
            $.ajax({
                type: 'POST',
                url: "./php/getDetails.php",
                data: { employeeId: userInput, request: 3},
                cache: false,
                dataType: "json",
                success: function (response) {
                    if (response != null) {// if data is NOT EMPTY
                        // VARIABLE FOR EACH ROW RESULT FROM DATABASE
                        var empName = response[0]['EMP_NAME'];
                        var empTeam = response[0]['TEAM'];
                        var empDepart = response[0]['DEPARTMENT'];

                        // console.log("Details from Database", empName, "Team", empTeam);

                        // PARSING VARIABLE TO THE HTML ELEMENT
                        $('#reAssignToName').val(empName);
                        $('#reAssignToTeam').val(empTeam);
                        $('#dept').val(empDepart);
                        $("#reAssignToName,#reAssignToTeam, #reAssignTo, #dept")
                            .css({
                                "border": "",
                            });
                        $("#reAssignToName, #reAssignToTeam")
                            .attr("placeholder", "");
                        $("#reAssignToName, #reAssignToTeam, #reAssignTo, #dept")
                            .css({
                                "color": "",
                                "border": "1px solid #63f200"
                            });

                    };
                },
                error: function () {
                    $("#reAssignToName, #reAssignToTeam, #dept")
                        .val("")
                        .attr("placeholder", "Invalid ðŸ˜¡")
                        .css({
                            "color": "red",
                            "border": "1px solid red"
                        });
                    $("#reAssignTo").css("border", "1px solid red");
                }
            });
        }
    });
    //=====================================================>
    // </END OF REASSIGNMENT AUTOCOMPLETE
    //=====================================================>

    //=====================================================>
    // START OF QDN REASSIGNMENT FUNCTION 
    //=====================================================>
    $(document).on("change", "#reAssign", function () {
        var $input = $(this);
        $(".analysisSection").remove();
        if (($input.is(":checked")) === true) {
            $("#submitUpdate").remove();
            var reAssignmentInputs = "<div id='reAssignment'><div  class='row'><div class='col-4'><label for='reAssignTo' class='col-form-label'>ReassignTo</label><input id='reAssignTo' type='number' class='form-control' placeholder='Employee #...' required/></div><div class='col-5'><label class='col-form-label' for='reAssignToName'>Emp. Name:</label><input id='reAssignToName' type='text' class='form-control' disabled/></div><div class='col-3'><label class='col-form-label'>Team:</label><input id='reAssignToTeam' type='text' class='form-control' disabled/></div></div><div class='row'><div class = 'col-4'></div><div class = 'col-5'><label class='col-form-label' for='dept' >Department:</label><input id='dept' type='text' class='form-control' disabled/></div><div class = 'col-3'></div></div><div class='row col-form-label-lg mt-3'><div class='col'><label class='col-form-label'>Reassignment Description:</label><textarea id='reAssignmentDes' class='form-control text-center w-50' rows='2' required></textarea></div></div></div>";

            var forReAssBtn = "<button class='submitReassignment w-100 btn btn-primary btn-lg mt-3' id='submitReassignment'>Submit for Reassignment</button>";

            $("#reAssignDiv").after(reAssignmentInputs, forReAssBtn);
            $(".analysisSection").remove();

            $("#qdnNumber").on('keydown paste focus mousedown', function (e) {
                if (e.keyCode != 9) // ignore tab
                    e.preventDefault();
            });
        }
        else if (($input.is(":checked")) === false) {
            $("#qdnNumber").on('keydown paste focus mousedown', function (e) {
                $(this).unbind("keydown paste focus mousedown");
            });
            $("#reAssignment, #submitReassignment, .analysisSection").remove();
            $("#reAssignDiv").after(analysisSectionTemplate);
            var currentMatchedQdnNum = $("#qdnNumber").val();
            // REQUEST FOR QDN DETAILS (request 7) 
            $.ajax({
                type: 'POST',
                url: "./php/getDetails.php",
                data: { request: 7 },
                cache: false,
                dataType: "json",
                success: qdnDetails
            });
            // FUNCTIONS THAT HANDLE PAGE LOADING DEFAULT QDN 
            function qdnDetails(data) {
                var dataLen = data.length
                var checkID;
                // LOOP TO LOOK THE ID OF CURRENT QDN
                for (var i = 0; i < dataLen; i++) {
                    var qdnNumber = data[i]['qdnNo'];
                    if (currentMatchedQdnNum == qdnNumber) {
                        var checkID = data[i]["id"];
                    };
                };
                // CHECKING THE EXISTENCE OF THE QDN ID
                if (checkID) {
                    // EXECUTION OF FUCNTIONS Reassignment,
                    // Containment, Correction, Corrective
                    exeFuncReass(checkID);
                    exeFuncContain(checkID);
                    exeFuncCorrection(checkID);
                    exeFuncCorrective(checkID);
                }
                // REQUEST FOR QDN(S) DETAILS (request 8)
                $.ajax({
                    type: 'POST',
                    url: "./php/getDetails.php",
                    data: { matchedQdnNum: currentMatchedQdnNum, request: 8 },
                    cache: false,
                    dataType: "json",
                    success: loadDataFromDb,
                });
                // FUNCTION TO HANDLE QDN(S) DETAILS AND SEND TO THE HTML PAGE
                function loadDataFromDb(data) {
                    var des = data[0]["disposition"];
                    var COD = data[0]["cause_of_defects"];
                    var CODDes = data[0]["cause_of_defects_des"];

                    var dataLen = data.length;

                    var issuedByName = data[0]['issuedByName'];
                    var issuedByTeam = data[0]['issuedByTeam'];
                    var issuedByName = data[0]['issuedByName'];
                    var issuedByTeam = data[0]['issuedByTeam'];
                    var issuedToName = data[0]['issuedToName'];
                    var issuedToTeam = data[0]['issuedToTeam'];
                    var customer = data[0]['customer'];
                    var machine = data[0]['machine'];
                    var packageType = data[0]['packageType'];
                    var deviceName = data[0]['deviceName'];
                    var station = data[0]['station'];
                    var lotId = data[0]['lotId'];
                    var teamResp = data[0]['teamResp'];
                    var dateTime = data[0]['dateTime'];
                    var classification = data[0]['classification'];
                    var defects = data[0]['defects'];
                    var failure_mode = data[0]['failure_mode'];

                    if (dataLen) {
                        $("#ibName").html(issuedByName);
                        $("#ibTeam").html(issuedByTeam);
                        $("#itName").html(issuedToName);
                        $("#itTeam").html(issuedToTeam);
                        $("#customer").html(customer);
                        $("#machine").html(machine);
                        $("#pkgType").html(packageType);
                        $("#partName").html(deviceName);
                        $("#station").html(station);
                        $("#lotId").html(lotId);
                        $("#teamResp").html(teamResp);
                        $("#dateTime").html(dateTime);
                        $("#classification").html(classification);
                        $("#defects").html(defects);
                        $("#failureMode").html(failure_mode);
                    };
                    //**FUNCTION EXECUTION FOR RADIO BUTTON VALUES
                    checkTheRadio(des, COD, CODDes, failure_mode);
                };
            };
        };
    });
    //=====================================================>
    // </ OF QDN REASSIGNMENT FUNCTION 
    //=====================================================>

    //=====================================================>
    // THIS CONDITION WILL LOAD THE LATEST QDN NUMBER
    // AS DEFAULT QDN WHEN YOU ENTER THE ANALYSIS PAGE 
    //=====================================================>
    if (qdnNumberForAnalysis == "") {
        // REQUEST FOR QDN DETAILS (request 7) 
        $.ajax({
            type: 'POST',
            url: "./php/getDetails.php",
            data: { request: 7 },
            cache: false,
            dataType: "json",
            success: qdnDetails
        });
        // FUNCTIONS THAT HANDLE PAGE LOADING DEFAULT QDN 
        function qdnDetails(data) {
            if (data){
                var dataLen = data.length;
                var paunangValue = data[0]['qdnNo'];
                // ON DOCUMENT LOAD THIS WELL SET THE QDN NUMBER INPUT
                // INTO LATEST QDN NUMBER AND LOAD THE CORRESPONDING DETAILS OF ITâ€¦
                $("#qdnNumber").val(paunangValue);
                var currentMatchedQdnNum = $("#qdnNumber").val();
                var checkID;
                // LOOP TO LOOK THE ID OF CURRENT QDN               
                for (var i = 0; i < dataLen; i++) {
                    var qdnNumber = data[i]['qdnNo'];
                    if (currentMatchedQdnNum == qdnNumber) {
                        var checkID = data[i]["id"];
                        // console.log("This is what I'm looking for ",checkID);
                    };
                };
                // CHECKING THE EXISTENCE OF THE QDN ID
                if (checkID) {
                    $("#reAssignDiv").after(analysisSectionTemplate);
                    // EXECUTION OF FUCNTIONS Reassignment,
                    // Containment, Correction, Corrective
                    exeFuncReass(checkID);
                    exeFuncContain(checkID);
                    exeFuncCorrection(checkID);
                    exeFuncCorrective(checkID);
                };
                // REQUEST FOR QDN(S) DETAILS (request 8)
                $.ajax({
                    type: 'POST',
                    url: "./php/getDetails.php",
                    data: { matchedQdnNum: currentMatchedQdnNum, request: 8 },
                    cache: false,
                    dataType: "json",
                    success: loadDataFromDb,
                });
                // FUNCTION TO HANDLE QDN(S) DETAILS AND SEND TO THE HTML PAGE
                function loadDataFromDb(data) {
                    var dataLen = data.length;
                    var des = data[0]["disposition"];
                    var COD = data[0]["cause_of_defects"];
                    var CODDes = data[0]["cause_of_defects_des"];
                    var status = data[0]['status'];
                    var issuedByName = data[0]['issuedByName'];
                    var issuedByTeam = data[0]['issuedByTeam'];
                    var issuedByName = data[0]['issuedByName'];
                    var issuedByTeam = data[0]['issuedByTeam'];
                    var issuedToName = data[0]['issuedToName'];
                    var issuedToTeam = data[0]['issuedToTeam'];
                    var customer = data[0]['customer'];
                    var machine = data[0]['machine'];
                    var packageType = data[0]['packageType'];
                    var deviceName = data[0]['deviceName'];
                    var station = data[0]['station'];
                    var lotId = data[0]['lotId'];
                    var teamResp = data[0]['teamResp'];
                    var dateTime = data[0]['dateTime'];
                    var classification = data[0]['classification'];
                    var defects = data[0]['defects'];
                    var failure_mode = data[0]['failure_mode'];
                    if (dataLen) {
                        $("#ibName").html(issuedByName);
                        $("#ibTeam").html(issuedByTeam);
                        $("#itName").html(issuedToName);
                        $("#itTeam").html(issuedToTeam);
                        $("#customer").html(customer);
                        $("#machine").html(machine);
                        $("#pkgType").html(packageType);
                        $("#partName").html(deviceName);
                        $("#station").html(station);
                        $("#lotId").html(lotId);
                        $("#teamResp").html(teamResp);
                        $("#dateTime").html(dateTime);
                        $("#classification").html(classification);
                        $("#defects").html(defects);
                        $("#failureMode").html(failure_mode);
                    };
                    //**FUNCTION EXECUTION FOR RADIO BUTTON VALUES
                    checkTheRadio(des, COD, CODDes, failure_mode);
                };
            };
        };
    }
    else {
        // REQUEST FOR QDN DETAILS (request 7) 
        $.ajax({
            type: 'POST',
            url: "./php/getDetails.php",
            data: { request: 7 },
            cache: false,
            dataType: "json",
            success: qdnDetails
        });
        // FUNCTIONS THAT HANDLE PAGE LOADING DEFAULT QDN 
        function qdnDetails(data) {
            var dataLen = data.length;
            var paunangValue = data[0]['qdnNo'];
            // ON DOCUMENT LOAD THIS WELL SET THE QDN NUMBER INPUT
            // INTO LATEST QDN NUMBER AND LOAD THE CORRESPONDING DETAILS OF ITâ€¦
            $("#qdnNumber").val(paunangValue);
            var currentMatchedQdnNum = $("#qdnNumber").val();
            var checkID;
            // LOOP TO LOOK THE ID OF CURRENT QDN               
            for (var i = 0; i < dataLen; i++) {
                var qdnNumber = data[i]['qdnNo'];
                if (currentMatchedQdnNum == qdnNumber) {
                    var checkID = data[i]["id"];
                };
            };
            // CHECKING THE EXISTENCE OF THE QDN ID
            if (checkID) {
                $("#reAssignDiv").after(analysisSectionTemplate);
                // EXECUTION OF FUCNTIONS Reassignment,
                // Containment, Correction, Corrective
                exeFuncReass(checkID);
                exeFuncContain(checkID);    
                exeFuncCorrection(checkID);
                exeFuncCorrective(checkID);
            };
            // REQUEST FOR QDN(S) DETAILS (request 8)
            $.ajax({
                type: 'POST',
                url: "./php/getDetails.php",
                data: { matchedQdnNum: currentMatchedQdnNum, request: 8 },
                cache: false,
                dataType: "json",
                success: loadDataFromDb,
            });
            // FUNCTION TO HANDLE QDN(S) DETAILS AND SEND TO THE HTML PAGE
            function loadDataFromDb(data) {
                var des = data[0]["disposition"];
                var COD = data[0]["cause_of_defects"];
                var CODDes = data[0]["cause_of_defects_des"];

                var dataLen = data.length;

                var issuedByName = data[0]['issuedByName'];
                var issuedByTeam = data[0]['issuedByTeam'];
                var issuedByName = data[0]['issuedByName'];
                var issuedByTeam = data[0]['issuedByTeam'];
                var issuedToName = data[0]['issuedToName'];
                var issuedToTeam = data[0]['issuedToTeam'];
                var customer = data[0]['customer'];
                var machine = data[0]['machine'];
                var packageType = data[0]['packageType'];
                var deviceName = data[0]['deviceName'];
                var station = data[0]['station'];
                var lotId = data[0]['lotId'];
                var teamResp = data[0]['teamResp'];
                var dateTime = data[0]['dateTime'];
                var classification = data[0]['classification'];
                var defects = data[0]['defects'];
                var failure_mode = data[0]['failure_mode'];

                if (dataLen > 0) {
                    $("#ibName").html(issuedByName);
                    $("#ibTeam").html(issuedByTeam);
                    $("#itName").html(issuedToName);
                    $("#itTeam").html(issuedToTeam);
                    $("#customer").html(customer);
                    $("#machine").html(machine);
                    $("#pkgType").html(packageType);
                    $("#partName").html(deviceName);
                    $("#station").html(station);
                    $("#lotId").html(lotId);
                    $("#teamResp").html(teamResp);
                    $("#dateTime").html(dateTime);
                    $("#classification").html(classification);
                    $("#defects").html(defects);
                    $("#failureMode").html(failure_mode);
                };
                //**FUNCTION EXECUTION FOR RADIO BUTTON VALUES
                checkTheRadio(des, COD, CODDes, failure_mode);
            };
        };
    };
    //=====================================================>
    // </ OF DEFAULT NUMBER 
    //=====================================================>

    //=====================================================>
    // START OF ANALYSIS AUTOCOMPLETE(AC) KEYUP FUNCTION
    //=====================================================>
    $("#qdnNumber").on("keyup paste", function () {
        var input = $(this).val();
        var usrInput = $.trim(input);
        var usrInputLen = usrInput.length;
        var div1 =  document.getElementById("#reAssignDiv");
        if (usrInputLen) {
            // REQUEST FOR MATCHED QND DETAILS (request 8)
            $.ajax({
                type: 'POST',
                url: "./php/getDetails.php",
                data: { matchedQdnNum: usrInput, request: 8 },
                cache: false,
                dataType: "json",
                success: getMatchedQdnDetails,
                error: function (){
                    var errorSpan = "<span class='invalid'>Invalid QDN Number!</span>";
                    $(".invalid").remove();
                    $(".fromDbData").remove();
                    $(".errorSpan").append(errorSpan);
                    $("#reAssignDiv").css("visibility", "hidden");
                    $(".analysisSection").remove();
                    makeItBlank();
                }
            });
            //FUNCTION TO HANDLE QND DETAILS
            function getMatchedQdnDetails(data) {
                // CHECK IF THE DATA PARAMETER IS NOT NULL
                if ( data ){
                    // RESULTS FROM REQUEST STORED IN VARIABLES
                    // div1 ? $("#reAssignDiv").after(analysisSectionTemplate):
                    // $(".issueDetails").after(analysisSectionTemplate);
                    var checkID = data[0]["id"];
                    var dataLen = data.length;
                    var des = data[0]["disposition"];
                    var COD = data[0]["cause_of_defects"];
                    var CODDes = data[0]["cause_of_defects_des"];
                    var issuedByName = data[0]['issuedByName'];
                    var issuedByTeam = data[0]['issuedByTeam'];
                    var issuedByName = data[0]['issuedByName'];
                    var issuedByTeam = data[0]['issuedByTeam'];
                    var issuedToName = data[0]['issuedToName'];
                    var issuedToTeam = data[0]['issuedToTeam'];
                    var customer = data[0]['customer'];
                    var machine = data[0]['machine'];
                    var packageType = data[0]['packageType'];
                    var deviceName = data[0]['deviceName'];
                    var station = data[0]['station'];
                    var lotId = data[0]['lotId'];
                    var teamResp = data[0]['teamResp'];
                    var dateTime = data[0]['dateTime'];
                    var classification = data[0]['classification'];
                    var defects = data[0]['defects'];
                    var failure_mode = data[0]['failure_mode'];

                    // CHECKING THE EXISTENCE OF THE QDN ID 
                    if ((checkID) && ($(".fromDbData").length === 0)) {
                        // $("#reAssignDiv").after(analysisSectionTemplate);
                        // EXECUTION OF FUNCTIONS Reassignment,
                        // Containment, Correction, Corrective
                        exeFuncReass(checkID);
                        exeFuncContain(checkID);
                        exeFuncCorrection(checkID);
                        exeFuncCorrective(checkID);
                    };
                    // IF THERE IS A VALID DATA FROM INPUT 
                    // APPEND THEM â€¦
                    if (dataLen) {
                        $(".analysisSection").remove();
                        $(".invalid").remove();
                        $("#ibName").html(issuedByName);
                        $("#ibTeam").html(issuedByTeam);
                        $("#itName").html(issuedToName);
                        $("#itTeam").html(issuedToTeam);
                        $("#customer").html(customer);
                        $("#machine").html(machine);
                        $("#pkgType").html(packageType);
                        $("#partName").html(deviceName);
                        $("#station").html(station);
                        $("#lotId").html(lotId);
                        $("#teamResp").html(teamResp);
                        $("#dateTime").html(dateTime);
                        $("#classification").html(classification);
                        $("#defects").html(defects);
                        $("#failureMode").html(failure_mode);
                        $("#reAssignDiv").css("visibility", "visible");
                        $("#reAssignDiv").after(analysisSectionTemplate);
                    };
                   //**FUNCTION EXECUTION FOR RADIO BUTTON VALUES
                   checkTheRadio(des, COD, CODDes, failure_mode);
                }
                else {
                    // console.log("This is test feedback!");
                    var errorSpan = "<span class='invalid'>Invalid QDN Number!</span>";
                    $(".invalid").remove();
                    $(".fromDbData").remove();
                    $(".errorSpan").append(errorSpan);
                    $(".analysisSection").remove();
                    makeItBlank();
                };
                // </ End of checking if parameter is not null
            };
            // </End of function to handle qdn details
        };
        // AJAX REQUEST FOR AC ARRAY SOURCE
        var qdnNumbers = [];
        // REQUEST FOR QND DETAILS (request 7.1)
        $.ajax({
            type: 'POST',
            url: "./php/getDetails.php",
            data: { searchForThisQdnNo: usrInput, request: 7.1},
            cache: false,
            dataType: "json",
            success: function (data) {
                // console.log (data);
                var dataLen = data.length;
                for (var i = 0; i < dataLen; i++) {
                    qdnNumbers.push(data[i]['qdnNo']);
                };
            }
        });
        // AC SUGGESTION
        $(this).autocomplete({
            source: qdnNumbers,
            // </END OF FUNCTION WHEN YOU CLICK AC SUGGESTION(S).
            select: function (event, ui) {
                //"selectedValue" variable is to identify the 
                // users selected value on the  AC suggestions.
                var selectedValue = ui["item"]["value"];

                // DETAILS REQUEST FOR SELECTED QND Number(request 8)
                $.ajax({
                    type: 'POST',
                    url: "./php/getDetails.php",
                    data: { matchedQdnNum: selectedValue, request: 8 },
                    cache: false,
                    dataType: "json",
                    success: getQdnDetails
                });
                // FUNCTION TO HANDLE MATCHED QND DETAILS
                function getQdnDetails(data) {
                    //CHECK IF getQdnDetails(data) PARA 
                    var checkID = data[0]["id"];

                    var dataLen = data.length;
                    var des = data[0]["disposition"];
                    var COD = data[0]["cause_of_defects"];
                    var CODDes = data[0]["cause_of_defects_des"];

                    var issuedByName = data[0]['issuedByName'];
                    var issuedByTeam = data[0]['issuedByTeam'];
                    var issuedByName = data[0]['issuedByName'];
                    var issuedByTeam = data[0]['issuedByTeam'];
                    var issuedToName = data[0]['issuedToName'];
                    var issuedToTeam = data[0]['issuedToTeam'];
                    var customer = data[0]['customer'];
                    var machine = data[0]['machine'];
                    var packageType = data[0]['packageType'];
                    var deviceName = data[0]['deviceName'];
                    var station = data[0]['station'];
                    var lotId = data[0]['lotId'];
                    var teamResp = data[0]['teamResp'];
                    var dateTime = data[0]['dateTime'];
                    var classification = data[0]['classification'];
                    var defects = data[0]['defects'];
                    var failure_mode = data[0]['failure_mode'];

                    // CHECKING THE EXISTENCE OF THE QDN ID
                    if ((checkID) && ($(".fromDbData").length === 0)) {
                        // $("#reAssignDiv").after(analysisSectionTemplate);
                        // EXECUTION OF FUCNTIONS Reassignment,
                        // Containment, Correction, Corrective
                        exeFuncReass(checkID);
                        exeFuncContain(checkID);
                        exeFuncCorrection(checkID);
                        exeFuncCorrective(checkID);
                    };
                    // CONDITION TO APPEND QDN DETAILS FROM DB
                    if (dataLen) {
                        $(".analysisSection").remove();
                        $(".invalid").remove();
                        $("#ibName").html(issuedByName);
                        $("#ibTeam").html(issuedByTeam);
                        $("#itName").html(issuedToName);
                        $("#itTeam").html(issuedToTeam);
                        $("#customer").html(customer);
                        $("#machine").html(machine);
                        $("#pkgType").html(packageType);
                        $("#partName").html(deviceName);
                        $("#station").html(station);
                        $("#lotId").html(lotId);
                        $("#teamResp").html(teamResp);
                        $("#dateTime").html(dateTime);
                        $("#classification").html(classification);
                        $("#defects").html(defects);
                        $("#failureMode").html(failure_mode);
                        $("#reAssignDiv").css("visibility", "visible");
                        $("#reAssignDiv").after(analysisSectionTemplate);
                    };
                    //**FUNCTION EXECUTION FOR RADIO BUTTON VALUES
                    checkTheRadio(des, COD, CODDes, failure_mode);
                };// </END OF FUNCTION TO HANDLE MATCHED QND DETAILS

            }, // </END OF SELECT WHEN AUTO COMPLETE IS SUGGESTION IS CLICKED
            
        }); // </END OF FUNCTION WHEN YOU CLICK AC SUGGESTION(S).
    });
    //=====================================================>
    // </END OF ANALYSIS AUTOCOMPLETE(AC) KEYUP FUNCTION
    //=====================================================>
});